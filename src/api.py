"""Web API exposing model training data and predictions.

Uses FastAPI so it can be mounted in the notebook or deployed separately via
Uvicorn. For the MVP the API surfaces:

* `/health` – quick liveness check
* `/metrics` – model evaluation metrics read from the persisted artifact
* `/predict` – simple prediction given a city population

The API reads the persisted JSON regression artifact generated by the
training pipeline. If the artifact is missing a 404 is returned to ensure the
client re-trains first.
"""

from __future__ import annotations

from typing import Any, Dict

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from .model import load_model_artifact, predict_from_population

app = FastAPI(title="Museum Attendance API")


class PredictionRequest(BaseModel):
    population: int


@app.get("/health")
async def health() -> Dict[str, str]:
    """Simple liveness endpoint."""

    return {"status": "ok"}


@app.get("/metrics")
async def metrics() -> Dict[str, Any]:
    """Return persisted model metrics."""

    try:
        artifact = load_model_artifact()
    except FileNotFoundError as exc:
        raise HTTPException(status_code=404, detail=str(exc)) from exc
    return artifact.get("training_metrics", {})


@app.post("/predict")
async def predict(request: PredictionRequest) -> Dict[str, float]:
    """Predict museum visitors from a city population using the stored model."""

    if request.population <= 0:
        raise HTTPException(status_code=400, detail="Population must be positive.")
    try:
        visitors = predict_from_population(request.population)
    except FileNotFoundError as exc:
        raise HTTPException(status_code=404, detail=str(exc)) from exc
    return {"predicted_visitors": visitors}


def create_app() -> FastAPI:
    """Factory for integration with other tooling (e.g., uvicorn workers)."""

    return app


__all__ = ["app", "create_app"]


